# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_llvm_wrapper', [dirname(__file__)])
        except ImportError:
            import _llvm_wrapper
            return _llvm_wrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_llvm_wrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _llvm_wrapper = swig_import_helper()
    del swig_import_helper
else:
    import _llvm_wrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _llvm_wrapper.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _llvm_wrapper.SwigPyIterator_value(self)
    def incr(self, n = 1): return _llvm_wrapper.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _llvm_wrapper.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _llvm_wrapper.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _llvm_wrapper.SwigPyIterator_equal(self, *args)
    def copy(self): return _llvm_wrapper.SwigPyIterator_copy(self)
    def next(self): return _llvm_wrapper.SwigPyIterator_next(self)
    def __next__(self): return _llvm_wrapper.SwigPyIterator___next__(self)
    def previous(self): return _llvm_wrapper.SwigPyIterator_previous(self)
    def advance(self, *args): return _llvm_wrapper.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _llvm_wrapper.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _llvm_wrapper.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _llvm_wrapper.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _llvm_wrapper.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _llvm_wrapper.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _llvm_wrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _llvm_wrapper.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ArrayString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayString, name)
    __repr__ = _swig_repr
    def iterator(self): return _llvm_wrapper.ArrayString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _llvm_wrapper.ArrayString___nonzero__(self)
    def __bool__(self): return _llvm_wrapper.ArrayString___bool__(self)
    def __len__(self): return _llvm_wrapper.ArrayString___len__(self)
    def pop(self): return _llvm_wrapper.ArrayString_pop(self)
    def __getslice__(self, *args): return _llvm_wrapper.ArrayString___getslice__(self, *args)
    def __setslice__(self, *args): return _llvm_wrapper.ArrayString___setslice__(self, *args)
    def __delslice__(self, *args): return _llvm_wrapper.ArrayString___delslice__(self, *args)
    def __delitem__(self, *args): return _llvm_wrapper.ArrayString___delitem__(self, *args)
    def __getitem__(self, *args): return _llvm_wrapper.ArrayString___getitem__(self, *args)
    def __setitem__(self, *args): return _llvm_wrapper.ArrayString___setitem__(self, *args)
    def append(self, *args): return _llvm_wrapper.ArrayString_append(self, *args)
    def empty(self): return _llvm_wrapper.ArrayString_empty(self)
    def size(self): return _llvm_wrapper.ArrayString_size(self)
    def clear(self): return _llvm_wrapper.ArrayString_clear(self)
    def swap(self, *args): return _llvm_wrapper.ArrayString_swap(self, *args)
    def get_allocator(self): return _llvm_wrapper.ArrayString_get_allocator(self)
    def begin(self): return _llvm_wrapper.ArrayString_begin(self)
    def end(self): return _llvm_wrapper.ArrayString_end(self)
    def rbegin(self): return _llvm_wrapper.ArrayString_rbegin(self)
    def rend(self): return _llvm_wrapper.ArrayString_rend(self)
    def pop_back(self): return _llvm_wrapper.ArrayString_pop_back(self)
    def erase(self, *args): return _llvm_wrapper.ArrayString_erase(self, *args)
    def __init__(self, *args): 
        this = _llvm_wrapper.new_ArrayString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _llvm_wrapper.ArrayString_push_back(self, *args)
    def front(self): return _llvm_wrapper.ArrayString_front(self)
    def back(self): return _llvm_wrapper.ArrayString_back(self)
    def assign(self, *args): return _llvm_wrapper.ArrayString_assign(self, *args)
    def resize(self, *args): return _llvm_wrapper.ArrayString_resize(self, *args)
    def insert(self, *args): return _llvm_wrapper.ArrayString_insert(self, *args)
    def reserve(self, *args): return _llvm_wrapper.ArrayString_reserve(self, *args)
    def capacity(self): return _llvm_wrapper.ArrayString_capacity(self)
    __swig_destroy__ = _llvm_wrapper.delete_ArrayString
    __del__ = lambda self : None;
ArrayString_swigregister = _llvm_wrapper.ArrayString_swigregister
ArrayString_swigregister(ArrayString)

class ArrayInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _llvm_wrapper.ArrayInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _llvm_wrapper.ArrayInt___nonzero__(self)
    def __bool__(self): return _llvm_wrapper.ArrayInt___bool__(self)
    def __len__(self): return _llvm_wrapper.ArrayInt___len__(self)
    def pop(self): return _llvm_wrapper.ArrayInt_pop(self)
    def __getslice__(self, *args): return _llvm_wrapper.ArrayInt___getslice__(self, *args)
    def __setslice__(self, *args): return _llvm_wrapper.ArrayInt___setslice__(self, *args)
    def __delslice__(self, *args): return _llvm_wrapper.ArrayInt___delslice__(self, *args)
    def __delitem__(self, *args): return _llvm_wrapper.ArrayInt___delitem__(self, *args)
    def __getitem__(self, *args): return _llvm_wrapper.ArrayInt___getitem__(self, *args)
    def __setitem__(self, *args): return _llvm_wrapper.ArrayInt___setitem__(self, *args)
    def append(self, *args): return _llvm_wrapper.ArrayInt_append(self, *args)
    def empty(self): return _llvm_wrapper.ArrayInt_empty(self)
    def size(self): return _llvm_wrapper.ArrayInt_size(self)
    def clear(self): return _llvm_wrapper.ArrayInt_clear(self)
    def swap(self, *args): return _llvm_wrapper.ArrayInt_swap(self, *args)
    def get_allocator(self): return _llvm_wrapper.ArrayInt_get_allocator(self)
    def begin(self): return _llvm_wrapper.ArrayInt_begin(self)
    def end(self): return _llvm_wrapper.ArrayInt_end(self)
    def rbegin(self): return _llvm_wrapper.ArrayInt_rbegin(self)
    def rend(self): return _llvm_wrapper.ArrayInt_rend(self)
    def pop_back(self): return _llvm_wrapper.ArrayInt_pop_back(self)
    def erase(self, *args): return _llvm_wrapper.ArrayInt_erase(self, *args)
    def __init__(self, *args): 
        this = _llvm_wrapper.new_ArrayInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _llvm_wrapper.ArrayInt_push_back(self, *args)
    def front(self): return _llvm_wrapper.ArrayInt_front(self)
    def back(self): return _llvm_wrapper.ArrayInt_back(self)
    def assign(self, *args): return _llvm_wrapper.ArrayInt_assign(self, *args)
    def resize(self, *args): return _llvm_wrapper.ArrayInt_resize(self, *args)
    def insert(self, *args): return _llvm_wrapper.ArrayInt_insert(self, *args)
    def reserve(self, *args): return _llvm_wrapper.ArrayInt_reserve(self, *args)
    def capacity(self): return _llvm_wrapper.ArrayInt_capacity(self)
    __swig_destroy__ = _llvm_wrapper.delete_ArrayInt
    __del__ = lambda self : None;
ArrayInt_swigregister = _llvm_wrapper.ArrayInt_swigregister
ArrayInt_swigregister(ArrayInt)

class ArrayTypePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayTypePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayTypePtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _llvm_wrapper.ArrayTypePtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _llvm_wrapper.ArrayTypePtr___nonzero__(self)
    def __bool__(self): return _llvm_wrapper.ArrayTypePtr___bool__(self)
    def __len__(self): return _llvm_wrapper.ArrayTypePtr___len__(self)
    def pop(self): return _llvm_wrapper.ArrayTypePtr_pop(self)
    def __getslice__(self, *args): return _llvm_wrapper.ArrayTypePtr___getslice__(self, *args)
    def __setslice__(self, *args): return _llvm_wrapper.ArrayTypePtr___setslice__(self, *args)
    def __delslice__(self, *args): return _llvm_wrapper.ArrayTypePtr___delslice__(self, *args)
    def __delitem__(self, *args): return _llvm_wrapper.ArrayTypePtr___delitem__(self, *args)
    def __getitem__(self, *args): return _llvm_wrapper.ArrayTypePtr___getitem__(self, *args)
    def __setitem__(self, *args): return _llvm_wrapper.ArrayTypePtr___setitem__(self, *args)
    def append(self, *args): return _llvm_wrapper.ArrayTypePtr_append(self, *args)
    def empty(self): return _llvm_wrapper.ArrayTypePtr_empty(self)
    def size(self): return _llvm_wrapper.ArrayTypePtr_size(self)
    def clear(self): return _llvm_wrapper.ArrayTypePtr_clear(self)
    def swap(self, *args): return _llvm_wrapper.ArrayTypePtr_swap(self, *args)
    def get_allocator(self): return _llvm_wrapper.ArrayTypePtr_get_allocator(self)
    def begin(self): return _llvm_wrapper.ArrayTypePtr_begin(self)
    def end(self): return _llvm_wrapper.ArrayTypePtr_end(self)
    def rbegin(self): return _llvm_wrapper.ArrayTypePtr_rbegin(self)
    def rend(self): return _llvm_wrapper.ArrayTypePtr_rend(self)
    def pop_back(self): return _llvm_wrapper.ArrayTypePtr_pop_back(self)
    def erase(self, *args): return _llvm_wrapper.ArrayTypePtr_erase(self, *args)
    def __init__(self, *args): 
        this = _llvm_wrapper.new_ArrayTypePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _llvm_wrapper.ArrayTypePtr_push_back(self, *args)
    def front(self): return _llvm_wrapper.ArrayTypePtr_front(self)
    def back(self): return _llvm_wrapper.ArrayTypePtr_back(self)
    def assign(self, *args): return _llvm_wrapper.ArrayTypePtr_assign(self, *args)
    def resize(self, *args): return _llvm_wrapper.ArrayTypePtr_resize(self, *args)
    def insert(self, *args): return _llvm_wrapper.ArrayTypePtr_insert(self, *args)
    def reserve(self, *args): return _llvm_wrapper.ArrayTypePtr_reserve(self, *args)
    def capacity(self): return _llvm_wrapper.ArrayTypePtr_capacity(self)
    __swig_destroy__ = _llvm_wrapper.delete_ArrayTypePtr
    __del__ = lambda self : None;
ArrayTypePtr_swigregister = _llvm_wrapper.ArrayTypePtr_swigregister
ArrayTypePtr_swigregister(ArrayTypePtr)

class ArrayValuePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayValuePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayValuePtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _llvm_wrapper.ArrayValuePtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _llvm_wrapper.ArrayValuePtr___nonzero__(self)
    def __bool__(self): return _llvm_wrapper.ArrayValuePtr___bool__(self)
    def __len__(self): return _llvm_wrapper.ArrayValuePtr___len__(self)
    def pop(self): return _llvm_wrapper.ArrayValuePtr_pop(self)
    def __getslice__(self, *args): return _llvm_wrapper.ArrayValuePtr___getslice__(self, *args)
    def __setslice__(self, *args): return _llvm_wrapper.ArrayValuePtr___setslice__(self, *args)
    def __delslice__(self, *args): return _llvm_wrapper.ArrayValuePtr___delslice__(self, *args)
    def __delitem__(self, *args): return _llvm_wrapper.ArrayValuePtr___delitem__(self, *args)
    def __getitem__(self, *args): return _llvm_wrapper.ArrayValuePtr___getitem__(self, *args)
    def __setitem__(self, *args): return _llvm_wrapper.ArrayValuePtr___setitem__(self, *args)
    def append(self, *args): return _llvm_wrapper.ArrayValuePtr_append(self, *args)
    def empty(self): return _llvm_wrapper.ArrayValuePtr_empty(self)
    def size(self): return _llvm_wrapper.ArrayValuePtr_size(self)
    def clear(self): return _llvm_wrapper.ArrayValuePtr_clear(self)
    def swap(self, *args): return _llvm_wrapper.ArrayValuePtr_swap(self, *args)
    def get_allocator(self): return _llvm_wrapper.ArrayValuePtr_get_allocator(self)
    def begin(self): return _llvm_wrapper.ArrayValuePtr_begin(self)
    def end(self): return _llvm_wrapper.ArrayValuePtr_end(self)
    def rbegin(self): return _llvm_wrapper.ArrayValuePtr_rbegin(self)
    def rend(self): return _llvm_wrapper.ArrayValuePtr_rend(self)
    def pop_back(self): return _llvm_wrapper.ArrayValuePtr_pop_back(self)
    def erase(self, *args): return _llvm_wrapper.ArrayValuePtr_erase(self, *args)
    def __init__(self, *args): 
        this = _llvm_wrapper.new_ArrayValuePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _llvm_wrapper.ArrayValuePtr_push_back(self, *args)
    def front(self): return _llvm_wrapper.ArrayValuePtr_front(self)
    def back(self): return _llvm_wrapper.ArrayValuePtr_back(self)
    def assign(self, *args): return _llvm_wrapper.ArrayValuePtr_assign(self, *args)
    def resize(self, *args): return _llvm_wrapper.ArrayValuePtr_resize(self, *args)
    def insert(self, *args): return _llvm_wrapper.ArrayValuePtr_insert(self, *args)
    def reserve(self, *args): return _llvm_wrapper.ArrayValuePtr_reserve(self, *args)
    def capacity(self): return _llvm_wrapper.ArrayValuePtr_capacity(self)
    __swig_destroy__ = _llvm_wrapper.delete_ArrayValuePtr
    __del__ = lambda self : None;
ArrayValuePtr_swigregister = _llvm_wrapper.ArrayValuePtr_swigregister
ArrayValuePtr_swigregister(ArrayValuePtr)

class ArrayBBPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayBBPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayBBPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _llvm_wrapper.ArrayBBPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _llvm_wrapper.ArrayBBPtr___nonzero__(self)
    def __bool__(self): return _llvm_wrapper.ArrayBBPtr___bool__(self)
    def __len__(self): return _llvm_wrapper.ArrayBBPtr___len__(self)
    def pop(self): return _llvm_wrapper.ArrayBBPtr_pop(self)
    def __getslice__(self, *args): return _llvm_wrapper.ArrayBBPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _llvm_wrapper.ArrayBBPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _llvm_wrapper.ArrayBBPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _llvm_wrapper.ArrayBBPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _llvm_wrapper.ArrayBBPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _llvm_wrapper.ArrayBBPtr___setitem__(self, *args)
    def append(self, *args): return _llvm_wrapper.ArrayBBPtr_append(self, *args)
    def empty(self): return _llvm_wrapper.ArrayBBPtr_empty(self)
    def size(self): return _llvm_wrapper.ArrayBBPtr_size(self)
    def clear(self): return _llvm_wrapper.ArrayBBPtr_clear(self)
    def swap(self, *args): return _llvm_wrapper.ArrayBBPtr_swap(self, *args)
    def get_allocator(self): return _llvm_wrapper.ArrayBBPtr_get_allocator(self)
    def begin(self): return _llvm_wrapper.ArrayBBPtr_begin(self)
    def end(self): return _llvm_wrapper.ArrayBBPtr_end(self)
    def rbegin(self): return _llvm_wrapper.ArrayBBPtr_rbegin(self)
    def rend(self): return _llvm_wrapper.ArrayBBPtr_rend(self)
    def pop_back(self): return _llvm_wrapper.ArrayBBPtr_pop_back(self)
    def erase(self, *args): return _llvm_wrapper.ArrayBBPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _llvm_wrapper.new_ArrayBBPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _llvm_wrapper.ArrayBBPtr_push_back(self, *args)
    def front(self): return _llvm_wrapper.ArrayBBPtr_front(self)
    def back(self): return _llvm_wrapper.ArrayBBPtr_back(self)
    def assign(self, *args): return _llvm_wrapper.ArrayBBPtr_assign(self, *args)
    def resize(self, *args): return _llvm_wrapper.ArrayBBPtr_resize(self, *args)
    def insert(self, *args): return _llvm_wrapper.ArrayBBPtr_insert(self, *args)
    def reserve(self, *args): return _llvm_wrapper.ArrayBBPtr_reserve(self, *args)
    def capacity(self): return _llvm_wrapper.ArrayBBPtr_capacity(self)
    __swig_destroy__ = _llvm_wrapper.delete_ArrayBBPtr
    __del__ = lambda self : None;
ArrayBBPtr_swigregister = _llvm_wrapper.ArrayBBPtr_swigregister
ArrayBBPtr_swigregister(ArrayBBPtr)

ICMP_EQ = _llvm_wrapper.ICMP_EQ
ICMP_NE = _llvm_wrapper.ICMP_NE
ICMP_UGT = _llvm_wrapper.ICMP_UGT
ICMP_UGE = _llvm_wrapper.ICMP_UGE
ICMP_ULT = _llvm_wrapper.ICMP_ULT
ICMP_ULE = _llvm_wrapper.ICMP_ULE
ICMP_SGT = _llvm_wrapper.ICMP_SGT
ICMP_SGE = _llvm_wrapper.ICMP_SGE
ICMP_SLT = _llvm_wrapper.ICMP_SLT
ICMP_SLE = _llvm_wrapper.ICMP_SLE
FCMP_FALSE = _llvm_wrapper.FCMP_FALSE
FCMP_OEQ = _llvm_wrapper.FCMP_OEQ
FCMP_OGT = _llvm_wrapper.FCMP_OGT
FCMP_OGE = _llvm_wrapper.FCMP_OGE
FCMP_OLT = _llvm_wrapper.FCMP_OLT
FCMP_OLE = _llvm_wrapper.FCMP_OLE
FCMP_ONE = _llvm_wrapper.FCMP_ONE
FCMP_ORD = _llvm_wrapper.FCMP_ORD
FCMP_UNO = _llvm_wrapper.FCMP_UNO
FCMP_UEQ = _llvm_wrapper.FCMP_UEQ
FCMP_UGT = _llvm_wrapper.FCMP_UGT
FCMP_UGE = _llvm_wrapper.FCMP_UGE
FCMP_ULT = _llvm_wrapper.FCMP_ULT
FCMP_ULE = _llvm_wrapper.FCMP_ULE
FCMP_UNE = _llvm_wrapper.FCMP_UNE
FCMP_TRUE = _llvm_wrapper.FCMP_TRUE
class TypeFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypeFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["make_int"] = lambda x: _llvm_wrapper.TypeFactory_make_int
    if _newclass:make_int = staticmethod(_llvm_wrapper.TypeFactory_make_int)
    __swig_getmethods__["make_float"] = lambda x: _llvm_wrapper.TypeFactory_make_float
    if _newclass:make_float = staticmethod(_llvm_wrapper.TypeFactory_make_float)
    __swig_getmethods__["make_double"] = lambda x: _llvm_wrapper.TypeFactory_make_double
    if _newclass:make_double = staticmethod(_llvm_wrapper.TypeFactory_make_double)
    __swig_getmethods__["make_void"] = lambda x: _llvm_wrapper.TypeFactory_make_void
    if _newclass:make_void = staticmethod(_llvm_wrapper.TypeFactory_make_void)
    __swig_getmethods__["make_pointer"] = lambda x: _llvm_wrapper.TypeFactory_make_pointer
    if _newclass:make_pointer = staticmethod(_llvm_wrapper.TypeFactory_make_pointer)
    __swig_getmethods__["make_vector"] = lambda x: _llvm_wrapper.TypeFactory_make_vector
    if _newclass:make_vector = staticmethod(_llvm_wrapper.TypeFactory_make_vector)
    def __init__(self): 
        this = _llvm_wrapper.new_TypeFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _llvm_wrapper.delete_TypeFactory
    __del__ = lambda self : None;
TypeFactory_swigregister = _llvm_wrapper.TypeFactory_swigregister
TypeFactory_swigregister(TypeFactory)

def TypeFactory_make_int(*args):
  return _llvm_wrapper.TypeFactory_make_int(*args)
TypeFactory_make_int = _llvm_wrapper.TypeFactory_make_int

def TypeFactory_make_float():
  return _llvm_wrapper.TypeFactory_make_float()
TypeFactory_make_float = _llvm_wrapper.TypeFactory_make_float

def TypeFactory_make_double():
  return _llvm_wrapper.TypeFactory_make_double()
TypeFactory_make_double = _llvm_wrapper.TypeFactory_make_double

def TypeFactory_make_void():
  return _llvm_wrapper.TypeFactory_make_void()
TypeFactory_make_void = _llvm_wrapper.TypeFactory_make_void

def TypeFactory_make_pointer(*args):
  return _llvm_wrapper.TypeFactory_make_pointer(*args)
TypeFactory_make_pointer = _llvm_wrapper.TypeFactory_make_pointer

def TypeFactory_make_vector(*args):
  return _llvm_wrapper.TypeFactory_make_vector(*args)
TypeFactory_make_vector = _llvm_wrapper.TypeFactory_make_vector

class ConstantFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["make_int"] = lambda x: _llvm_wrapper.ConstantFactory_make_int
    if _newclass:make_int = staticmethod(_llvm_wrapper.ConstantFactory_make_int)
    __swig_getmethods__["make_int_signed"] = lambda x: _llvm_wrapper.ConstantFactory_make_int_signed
    if _newclass:make_int_signed = staticmethod(_llvm_wrapper.ConstantFactory_make_int_signed)
    __swig_getmethods__["make_real"] = lambda x: _llvm_wrapper.ConstantFactory_make_real
    if _newclass:make_real = staticmethod(_llvm_wrapper.ConstantFactory_make_real)
    __swig_getmethods__["make_undef"] = lambda x: _llvm_wrapper.ConstantFactory_make_undef
    if _newclass:make_undef = staticmethod(_llvm_wrapper.ConstantFactory_make_undef)
    def __init__(self): 
        this = _llvm_wrapper.new_ConstantFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _llvm_wrapper.delete_ConstantFactory
    __del__ = lambda self : None;
ConstantFactory_swigregister = _llvm_wrapper.ConstantFactory_swigregister
ConstantFactory_swigregister(ConstantFactory)

def ConstantFactory_make_int(*args):
  return _llvm_wrapper.ConstantFactory_make_int(*args)
ConstantFactory_make_int = _llvm_wrapper.ConstantFactory_make_int

def ConstantFactory_make_int_signed(*args):
  return _llvm_wrapper.ConstantFactory_make_int_signed(*args)
ConstantFactory_make_int_signed = _llvm_wrapper.ConstantFactory_make_int_signed

def ConstantFactory_make_real(*args):
  return _llvm_wrapper.ConstantFactory_make_real(*args)
ConstantFactory_make_real = _llvm_wrapper.ConstantFactory_make_real

def ConstantFactory_make_undef(*args):
  return _llvm_wrapper.ConstantFactory_make_undef(*args)
ConstantFactory_make_undef = _llvm_wrapper.ConstantFactory_make_undef

class FunctionAdaptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionAdaptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionAdaptor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _llvm_wrapper.new_FunctionAdaptor(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _llvm_wrapper.FunctionAdaptor_name(self)
    def valid(self): return _llvm_wrapper.FunctionAdaptor_valid(self)
    def __nonzero__(self):
        return _llvm_wrapper.FunctionAdaptor___nonzero__(self)
    __bool__ = __nonzero__


    def dump(self): return _llvm_wrapper.FunctionAdaptor_dump(self)
    def get_function(self): return _llvm_wrapper.FunctionAdaptor_get_function(self)
    def append_basic_block(self, *args): return _llvm_wrapper.FunctionAdaptor_append_basic_block(self, *args)
    def arguments(self): return _llvm_wrapper.FunctionAdaptor_arguments(self)
    def arg_size(self): return _llvm_wrapper.FunctionAdaptor_arg_size(self)
    def verify(self): return _llvm_wrapper.FunctionAdaptor_verify(self)
    __swig_destroy__ = _llvm_wrapper.delete_FunctionAdaptor
    __del__ = lambda self : None;
FunctionAdaptor_swigregister = _llvm_wrapper.FunctionAdaptor_swigregister
FunctionAdaptor_swigregister(FunctionAdaptor)

class JITEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JITEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JITEngine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _llvm_wrapper.new_JITEngine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _llvm_wrapper.delete_JITEngine
    __del__ = lambda self : None;
    def dump(self): return _llvm_wrapper.JITEngine_dump(self)
    def make_function(self, *args): return _llvm_wrapper.JITEngine_make_function(self, *args)
    def last_error(self): return _llvm_wrapper.JITEngine_last_error(self)
    def verify(self): return _llvm_wrapper.JITEngine_verify(self)
    def optimize(self): return _llvm_wrapper.JITEngine_optimize(self)
    def optimize_function(self, *args): return _llvm_wrapper.JITEngine_optimize_function(self, *args)
    def get_pointer_to_function(self, *args): return _llvm_wrapper.JITEngine_get_pointer_to_function(self, *args)
    def dump_asm(self, *args): return _llvm_wrapper.JITEngine_dump_asm(self, *args)
    def start_multithreaded(self): return _llvm_wrapper.JITEngine_start_multithreaded(self)
    def stop_multithreaded(self): return _llvm_wrapper.JITEngine_stop_multithreaded(self)
    def is_multithreaded(self): return _llvm_wrapper.JITEngine_is_multithreaded(self)
    def dump_passes(self): return _llvm_wrapper.JITEngine_dump_passes(self)
JITEngine_swigregister = _llvm_wrapper.JITEngine_swigregister
JITEngine_swigregister(JITEngine)

class Builder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Builder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Builder, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _llvm_wrapper.new_Builder()
        try: self.this.append(this)
        except: self.this = this
    def insert_at(self, *args): return _llvm_wrapper.Builder_insert_at(self, *args)
    def get_basic_block(self): return _llvm_wrapper.Builder_get_basic_block(self)
    def phi(self, *args): return _llvm_wrapper.Builder_phi(self, *args)
    def bitwise_and(self, *args): return _llvm_wrapper.Builder_bitwise_and(self, *args)
    def bitwise_or(self, *args): return _llvm_wrapper.Builder_bitwise_or(self, *args)
    def bitwise_xor(self, *args): return _llvm_wrapper.Builder_bitwise_xor(self, *args)
    def bitwise_not(self, *args): return _llvm_wrapper.Builder_bitwise_not(self, *args)
    def shl(self, *args): return _llvm_wrapper.Builder_shl(self, *args)
    def lshr(self, *args): return _llvm_wrapper.Builder_lshr(self, *args)
    def ashr(self, *args): return _llvm_wrapper.Builder_ashr(self, *args)
    def add(self, *args): return _llvm_wrapper.Builder_add(self, *args)
    def sub(self, *args): return _llvm_wrapper.Builder_sub(self, *args)
    def mul(self, *args): return _llvm_wrapper.Builder_mul(self, *args)
    def sdiv(self, *args): return _llvm_wrapper.Builder_sdiv(self, *args)
    def udiv(self, *args): return _llvm_wrapper.Builder_udiv(self, *args)
    def umod(self, *args): return _llvm_wrapper.Builder_umod(self, *args)
    def smod(self, *args): return _llvm_wrapper.Builder_smod(self, *args)
    def icmp(self, *args): return _llvm_wrapper.Builder_icmp(self, *args)
    def negative(self, *args): return _llvm_wrapper.Builder_negative(self, *args)
    def fadd(self, *args): return _llvm_wrapper.Builder_fadd(self, *args)
    def fsub(self, *args): return _llvm_wrapper.Builder_fsub(self, *args)
    def fmul(self, *args): return _llvm_wrapper.Builder_fmul(self, *args)
    def fdiv(self, *args): return _llvm_wrapper.Builder_fdiv(self, *args)
    def fmod(self, *args): return _llvm_wrapper.Builder_fmod(self, *args)
    def fcmp(self, *args): return _llvm_wrapper.Builder_fcmp(self, *args)
    def icast(self, *args): return _llvm_wrapper.Builder_icast(self, *args)
    def fcast(self, *args): return _llvm_wrapper.Builder_fcast(self, *args)
    def sitofp(self, *args): return _llvm_wrapper.Builder_sitofp(self, *args)
    def fptosi(self, *args): return _llvm_wrapper.Builder_fptosi(self, *args)
    def uitofp(self, *args): return _llvm_wrapper.Builder_uitofp(self, *args)
    def fptoui(self, *args): return _llvm_wrapper.Builder_fptoui(self, *args)
    def ret(self, *args): return _llvm_wrapper.Builder_ret(self, *args)
    def ret_void(self): return _llvm_wrapper.Builder_ret_void(self)
    def branch(self, *args): return _llvm_wrapper.Builder_branch(self, *args)
    def cond_branch(self, *args): return _llvm_wrapper.Builder_cond_branch(self, *args)
    def call(self, *args): return _llvm_wrapper.Builder_call(self, *args)
    def unreachable(self): return _llvm_wrapper.Builder_unreachable(self)
    def alloc(self, *args): return _llvm_wrapper.Builder_alloc(self, *args)
    def alloc_array(self, *args): return _llvm_wrapper.Builder_alloc_array(self, *args)
    def load(self, *args): return _llvm_wrapper.Builder_load(self, *args)
    def store(self, *args): return _llvm_wrapper.Builder_store(self, *args)
    def gep(self, *args): return _llvm_wrapper.Builder_gep(self, *args)
    def gep2(self, *args): return _llvm_wrapper.Builder_gep2(self, *args)
    def extract_element(self, *args): return _llvm_wrapper.Builder_extract_element(self, *args)
    def insert_element(self, *args): return _llvm_wrapper.Builder_insert_element(self, *args)
    def is_block_closed(self): return _llvm_wrapper.Builder_is_block_closed(self)
    __swig_destroy__ = _llvm_wrapper.delete_Builder
    __del__ = lambda self : None;
Builder_swigregister = _llvm_wrapper.Builder_swigregister
Builder_swigregister(Builder)

# This file is compatible with both classic and new-style classes.


